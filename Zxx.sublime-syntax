%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
# http://www.sublimetext.com/docs/3/scope_naming.html
name: zxx
file_extensions:
  - zxx
first_line_match: ^#!\s*/.*\bzxx(\d(\.\d)?)?\b
scope: source.zxx
variables:
  identifier: '(?:[a-zA-Z]|\p{L})(?:-?(?:[a-zA-Z0-9]|\p{L}))*'
  path: '[A-Za-z](?:[-./]?[A-Za-z0-9])*'
  # thousands-separator
  t13s3: '\d{1,3}(?:-\d{3})+'
  t3s13: (?:\d{3}-)*(?:\d{1,3})?
  builtin_types: \b(?:any|self|base|b(?:ool|yte)|string|rune|f(?:32|64|128|loat)|u?int|[ui](?:8|16|32|64|128)|time|error|void)\b(?=[^-]|$)

contexts:
  main:
    - include: use
    - include: let-pub
    - include: def-pub
    - include: fun-pub
    - match: ^.+$
      scope: comment.line.zxx

  must-indent:
    - match: ^( [^ ].*)$
      scope: invalid.illegal.missing-indentation.zxx
    - match: ^(  )+
      scope: punctuation.indentation.zxx
      push:
        - match: (?=[^ ])
          pop: true
        - match: ( ).*$
          scope: invalid.illegal.indentation.zxx
          pop: true

  continuation:
    - match: (?:((\; ).*)?)
      captures:
        1: comment.line.zxx
        2: punctuation.definition.comment.zxx
    - include: expression

  comment:
    - match: ^(?=[^ \n])
      pop: true
    - include: must-indent
    - match: (\; )
      scope: punctuation.definition.comment.zxx
      push:
        - meta_scope: comment.line.zxx
        - match: $
          pop: true
    - match: ;.*$
      scope: invalid.illegal.comment.zxx
      pop: true

  use:
    - match: ^(use)$
      captures:
        1: keyword.control.import.zxx
      push:
        - meta_scope: meta.block.use.zxx
        - include: comment
        - match: ({{path}})(?:\s+(_|{{identifier}}))?
          captures:
            1: string.unquoted.module-path.zxx
            2: entity.name.namespace.zxx

  fun-pub:
    - match: ^(fun (?:pub )?)
      scope: storage.type.zxx
      push:
        - meta_scope: meta.function.zxx
        - include: fun-named
  pop:
    - match: ^(?=[^ ])
      pop: true

  def-pub:
    - match: ^(def (?:pub )?)
      scope: storage.type.zxx
      push:
        - meta_scope: meta.type.zxx
        - include: type-named

  let-pub:
    - match: '^(let(?: pub)?)$'
      captures:
        1: storage.type.zxx
      push:
        - meta_scope: meta.block.let.zxx
        - include: comment
        - include: let-init

  let-init:
    - match: _
      scope: keyword.other.variable.zxx
    - match: ({{identifier}})
      scope: variable.other.constant.zxx

    - match: =
      scope: keyword.operator.assignment.zxx
      push: expression

  fun-named:
    - include: pop
    - match: (?:{{identifier}}\.)?(?:(\x27[^\x27]+\x27)|({{identifier}}))(?=\()
      captures:
        1: entity.name.function.overloading.zxx
        2: entity.name.function.zxx
      push:
        - include: pop
        - match: (\()
          scope: punctuation.section.parens.begin.zxx
          push:
            - meta_scope: meta.function.parameters.zxx
            - match: \)
              scope: punctuation.section.parens.end.zxx
              set:
                - meta_scope: meta.block.zxx
                - include: expression
            - include: parameter

  type-named:
    - include: comment
    - match: ({{identifier}})
      scope: entity.name.type.zxx
      push:
        - include: compound-types
        - include: anonymous-type
        - match: ({{builtin_types}})
          scope: support.type.zxx
        - match: (?=\;|$)
          set: field-decl

    - match: '--'
      push:
        - include: anonymous-type
        - match: ({{builtin_types}})
          scope: support.type.zxx
        - match: (?=\;|$)
          set: field-decl

  field-decl:
    - meta_scope: meta.field-decl.zxx
    - include: comment
    - match: (_|{{identifier}})
      scope: variable.other.member.zxx
      push:
        - include: comment
        - include: anonymous-type
        - include: brackets
        - match: (?:({{builtin_types}})|(?:({{identifier}})(\.))?({{identifier}}))
          captures:
            1: support.type.zxx
            3: punctuation.accessor.zxx
        - match: $
          pop: true

  parameter-inline:
    - match: \b(out|yield)[ ]+
      scope: keyword.control.zxx
    - include: compound-types
    - include: anonymous-type
    - match: (?:({{builtin_types}})|(?:({{identifier}})(\.))?({{identifier}}))
      captures:
        1: support.type.zxx
        3: punctuation.accessor.zxx
      push:
        - match: ([-+]?\d+) # def T [byte 0]
          scope: constant.numeric.integer.zxx
        - match: (?=[\]\}\)]|--)
          pop: true
        - include: param-name
    - match: (?=[\]\}\)]|--)
      pop: true

  parameter:
    - match: \b(out|yield)[ ]+
      scope: keyword.control.zxx
    - include: compound-types
    - include: anonymous-type
    - match: (?:({{builtin_types}})|(?:({{identifier}})(\.))?({{identifier}}))
      captures:
        1: support.type.zxx
        3: punctuation.accessor.zxx
      push:
        - match: (?=\))
          pop: true
        - include: comment
        - include: param-name

  param-name:
    - match: (?=\))
      pop: true
    - match: \,
      scope: punctuation.separator.zxx
      pop: true
    - match: ({{identifier}})
      scope: variable.parameter.zxx
      pop: true

  next:
    - match: $
      push: expression

  brackets:
    - match: \[
      scope: punctuation.section.brackets.begin.zxx
      push:
        - meta_scope: meta.brackets.zxx
        - match: \](?=\()
          scope: punctuation.section.brackets.end.zxx
          set: callify
        - match: \]
          scope: punctuation.section.brackets.end.zxx
          pop: true
        - include: next
        - include: expression
    - match: \(
      scope: punctuation.section.group.begin.zxx
      push:
        - meta_scope: meta.group.zxx
        - match: \)(?=\()
          scope: punctuation.section.group.end.zxx
          set: callify
        - match: \)
          scope: punctuation.section.group.end.zxx
          pop: true
        - include: next
        - include: expression
    - match: \{
      scope: punctuation.section.braces.begin.zxx
      push:
        - meta_scope: meta.braces.zxx
        - match: \}
          scope: punctuation.section.braces.end.zxx
          pop: true
        - include: next
        - include: expression

  expression:
    - include: comment
    - match: \b(error|void|out|echo|defer|if|for|else|elif|break|continue|throw|catch|yield)\b(?=[^-]|$)
      scope: keyword.control.zxx
      push: expression
    - match: \b(fun)[ ]
      push:
        - meta_scope: meta.function.zxx
        - include: fun-named
    - match: _
      scope: keyword.other.variable.zxx

    - include: literals
    - include: anonymous-type
    - include: brackets
    - include: builtin
    - include: operator

    - match: ({{identifier}})(?=\()
      scope: variable.other.zxx
      push: callify

    - match: ({{identifier}})
      scope: variable.other.zxx

    - match: (?=[\]\}\)])
      pop: true

  callify:
    - meta_scope: meta.function-call.zxx
    - match: \(
      scope: punctuation.section.parens.begin.zxx
    - match: \)
      scope: punctuation.section.parens.end.zxx
      pop: true
    - include: expression

  operator:
    - match: \.\.
      scope: keyword.operator.yielder.zxx
    - match: \.
      scope: punctuation.accessor.zxx
    - match: ((?:[-+*/&|^%]|\*\*|<<|>>>|>>|@)?=)
      scope: keyword.operator.assignment.zxx
    - match: (\*{1,2}|[-+/%])
      scope: keyword.operator.arithmetic.zxx
    - match: (<<|>>>|>>|[&^|~])
      scope: keyword.operator.bitwise.zxx
    - match: ([<>]=?)
      scope: keyword.operator.logical.zxx
    - match: \,
      scope: punctuation.separator.zxx
    - match: \b(of)\b(?=[^-])
      scope: keyword.control.zxx
    - match: \b(is|not|un|and|or|in)\b(?=[^-])
      scope: keyword.operator.word.zxx

  builtin:
    - match: \b(true|false|null|iota|NaN|Infinity)\b(?=[^-]|$)
      scope: keyword.other.constant.zxx
    - match: _
      scope: keyword.other.variable.zxx
    - match: ({{builtin_types}})(?=\()
      scope: support.type.zxx
      push: callify
    - match: ({{builtin_types}})
      scope: support.type.zxx

  time:
    - match: ((\d{4}(-?(0[1-9]|1[0-2])(-?(0[1-9]|[12][0-9]|3[01]))?)?)?((DST|T)?(\d\d(:?\d\d){0,2})?)?(\.\d{1,9})?(LSC)?(Z|[-+]\d\d(:?\d\d)?)?)
      scope: constant.other.time.zxx

  literals:
    - match: \b0f([0-9a-fA-F]{16}|[0-9a-fA-F]{8})\b
      scope: constant.numeric.floating-point.zxx

    - match: \b(0x[0-9a-fA-F]+|0b[01]+)\b
      scope: constant.numeric.integer.zxx

    - match: \b({{t13s3}}\.(?:{{t3s13}})(?:[eE][-+]?{{t13s3}})?)\b(?![.\d])
      scope: constant.numeric.floating-point.zxx

    - match: \b({{t13s3}}\.(?:{{t3s13}})(?:[eE][-+]?{{t13s3}})?)[.\d]+
      scope: invalid.illegal.floating-point.zxx

    - match: \b(\d+\.\d+(?:[eE][-+]?\d+)?)\b(?![.\d])
      scope: constant.numeric.floating-point.zxx

    - match: \b(\d+\.\d+(?:[eE][-+]?\d+)?)[.\d]+
      scope: invalid.illegal.floating-point.zxx

    - match: \b({{t13s3}}([eE][-+]?{{t13s3}})?|\d+)\b
      scope: constant.numeric.integer.zxx

    - match: \b({{t13s3}}([eE][-+]?{{t13s3}})?|\d+)\b
      scope: constant.numeric.integer.zxx


    - match: \"
      scope: punctuation.definition.string.begin.zxx
      push:
        - meta_scope: string.quoted.other.time.zxx
        - match: \"
          scope: punctuation.definition.string.end.zxx
          pop: true
        - include: time

    - match: \'
      scope: punctuation.definition.string.begin.zxx
      push:
        - meta_scope: string.quoted.single.zxx
        - match: \'
          scope: punctuation.definition.string.end.zxx
          pop: true
        - include: escaped_char

    - match: \`
      scope: punctuation.definition.string.begin.zxx
      push:
        - meta_scope: string.quoted.other.template.zxx
        - match: \`
          scope: punctuation.definition.string.end.zxx
          pop: true
        - match: '{{'
          scope: punctuation.section.group.begin.zxx
          push:
            - match: '}}'
              scope: punctuation.section.group.end.zxx
              pop: true
            - include: expression
        - match: ^\n
        - match: ^([^ ]{2})+
          scope: invalid.illegal.missing-indentation.zxx

  escaped_char:
    - match: ^(  )+
      scope: punctuation.indentation.zxx
    - match: (\\x[0-9A-Fa-f]{2})|(\\")|(\\')|(\\\\)|(\\\/)|(\\b)|(\\f)|(\\n)|(\\r)|(\\t)
      captures:
        1: constant.character.escape.hex.zxx
        2: constant.character.escape.double-quote.zxx
        3: constant.character.escape.single-quote.zxx
        4: constant.character.escape.reverse-solidus.zxx
        5: constant.character.escape.solidus.zxx
        6: constant.character.escape.backspace.zxx
        7: constant.character.escape.formfeed.zxx
        8: constant.character.escape.linefeed.zxx
        9: constant.character.escape.carriage-return.zxx
        10: constant.character.escape.horizontal-tab.zxx
    - match: (\\u\{[0-9A-Fa-f]{1,6}\})|(\\u[0-9A-Fa-f]{4})
      scope: constant.character.escape.unicode.zxx
    - match: (\\[\x21-\x7E])
      scope: constant.character.escape.visible.zxx

  compound-types:
    - match: \[
      scope: punctuation.section.brackets.begin.zxx
      push:
        - match: \]
          scope: punctuation.section.brackets.end.zxx
          pop: true
        - include: compound-types
        - include: anonymous-type
        - include: parameter-inline

    - match: \{
      scope: punctuation.section.braces.begin.zxx
      push:
        - match: \}
          scope: punctuation.section.braces.end.zxx
          pop: true
        - include: compound-types
        - include: anonymous-type
        - include: parameter-inline
    - match: (?=\)|--)
      pop: true

  anonymous-type:
    - match: \b(fun)(\()
      captures:
        1: storage.type.zxx
        2: punctuation.definition.parameter.begin.zxx
      push:
        - match: \)
          scope: punctuation.definition.parameter.end.zxx
          pop: true
        - include: parameter-inline
    - match: (?=[\]\}\)])
      pop: true