%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: zxx
file_extensions:
  - zxx
  - zxx.md
first_line_match: ^#!\s*/.*\bzxx(\d(\.\d)?)?\b
scope: source.zxx

variables:
  illegal_global: '\b(?:echo|error|void|fun|pub|let|def|iota|and|or|not|in|is|un|self|super|defer|if|of|for|else|break|continue|throw|catch|out|yield)\b'
  identifier: '\p{L}(?:-?[\d\p{L}])*'
  path: '(?:[.]/)?[A-Za-z]+(?:[._/-]*[A-Za-z0-9])*'
  # thousands-separator
  t13s3: '\d{1,3}(?:-\d{3})+'
  t3s13: '\d{3}(?:-\d{1,2}|(?:-\d{3})+(?:-\d{1,2})?)'
  basic_types: \b(?:self|any|bool|byte|string|rune|float(?:32|64)?|u?int(?:8|16|32|64)?|datetime)\b(?![-]?[\d\p{L}])
contexts:
  main:
    - include: use
    - include: top-let
    - include: top-def
    - include: top-fun
    - match: ^.*
      scope: comment.line.zxx

  use:
    - match: ^(use)\s
      scope: meta.use.zxx
      captures:
        1: keyword.control.use.zxx
      push:
        - include: comment
        - match: (\')({{path}})(\')(?:[ ]+({{identifier}}))?
          scope: meta.group.zxx
          captures:
            1: string.quoted.use-path.zxx punctuation.definition.string.begin.zxx
            2: string.quoted.use-path.zxx
            3: string.quoted.use-path.zxx punctuation.definition.string.end.zxx
            4: entity.name.namespace.zxx

  top-let:
    - match: ^(let|pub let)\s
      scope: meta.let.zxx
      captures:
        1: storage.type.zxx
      push:
        - include: comment
        - match: _
          scope: entity.name.constant.zxx
        - match: '{{illegal_global}}'
          scope: invalid.illegal.variable.zxx
          pop: true
        - match: '({{identifier}})'
          scope: variable.other.constant.zxx
        - match: \,
          scope: punctuation.separator.zxx
        - match: =
          scope: keyword.operator.assignment.zxx
          push:
            - include: expression
            - match: $
              pop: true

  top-fun:
    - match: ^(fun|pub fun)\s
      scope: meta.function.zxx storage.type.zxx
      push:
        - include: fun

  top-def:
    - match: ^(def|pub def)\s
      scope: meta.type.zxx storage.type.zxx
      push:
        - include: def
  def:
    - match: '^(?=[^\t\n])'
      pop: true
    - match: '({{identifier}})'
      captures:
        1: entity.name.type.zxx
      push:
        - match: (?:({{identifier}})(\.))?({{identifier}})
          captures:
            1: meta.namespace.zxx
            2: punctuation.accessor.zxx
            3: entity.other.inherited-class.zxx
        - match: $
          pop: true

    - match: ^(?=\t)
      set:
        - include: field


  field:
    - include: comment
    - match: \b(pub)\b
      scope: storage.modifier.zxx
    - match: '({{basic_types}}) *({{identifier}})?'
      captures:
        1: support.type.zxx
        2: variable.other.member.zxx

    - match: '({{identifier}}) *({{identifier}})?'
      captures:
        1: storage.type.zxx
        2: variable.other.member.zxx

  fun:
    - match: '^(?=[^\t\n])'
      pop: true
    - match: '(?:({{identifier}})(\.))?({{identifier}})'
      captures:
        1: storage.type.zxx
        2: punctuation.accessor.zxx
        3: entity.name.function.zxx
      set:
        - include: parameter

  parameter:
    - include: comment
    - match: \b(out)\b
      scope: keyword.control.zxx
    - match: '({{basic_types}}) *({{identifier}})?'
      captures:
        1: support.type.zxx
        2: variable.parameter.zxx
      set:
        - include: parameter-next

    - match: '(?:({{identifier}})(\.))?({{identifier}}) *({{identifier}})?'
      captures:
        1: storage.type.zxx
        2: punctuation.accessor.zxx
        3: storage.type.zxx
        4: variable.parameter.zxx
      set:
        - include: parameter-next
  parameter-next:
    - match: \,
      scope: punctuation.separator.zxx
      set:
        - include: parameter
    - match: \)
      scope: punctuation.definition.group.end.zxx
      pop: true
    - match: ^(?=\t+)
      set:
        - meta_scope: meta.block.statements.zxx
        - include: statements
    - include: comment

  comment:
    - match: (;)(.*)$
      captures:
        1: comment.line.zxx punctuation.definition.comment.zxx
        2: comment.line.zxx
    - match: '^\t+(?:([ ;])(.*))?'
      captures:
        1: comment.line.zxx punctuation.definition.comment.zxx
        2: comment.line.zxx
    - match: '^(?![\t\n])'
      pop: true

  statements:
    - match: '^(?=[^\t\n])'
      pop: true
    - include: comment
    - match: \b(echo|defer|if|of|for|else|break|continue|throw|catch|out|yield)\b
      scope: keyword.control.zxx
    - match: \b(copy|error|void)\b
      scope: support.function.builtin.zxx
    - match: \b(def|fun)\s
      scope: keyword.declaration.zxx
    - include: expression
    - include: assignment

  expression:
    - include: comment
    - match: \b(copy|error|void)\b
      scope: support.function.builtin.zxx
    - include: builtin
    - include: literals
    - include: operator
    - include: complex-types
    - match: '\b(let)\b'
      scope: invalid.illegal.variable.zxx

    - match: '({{identifier}})\('
      captures:
        1: variable.function.zxx
        2: punctuation.section.parens.begin.zxx
      push:
        - meta_scope: meta.function-call.zxx
        - match: \)
          scope: punctuation.section.parens.end.zxx
          pop: true
        - include: expression

    - match: '{{identifier}}'
      scope: variable.other.zxx

  literals:
    - match: '\b(\d{4}(-?(0[1-9]|1[0-2])(-?(0[1-9]|[12][0-9]|3[01]))?)?T(\d\d(:?\d\d){0,2}(\.\d{1,9})?)?(Z|[-+]\d\d(:?\d\d)?)?)\b'
      scope: constant.other.datetime.zxx

    - match: '\b0f([0-9a-fA-F]{16}|[0-9a-fA-F]{8})\b'
      scope: constant.numeric.floating-point.zxx

    - match: '\b(0x[0-9a-fA-F]+|0b[01]+)\b'
      scope: constant.numeric.integer.zxx

    - match: '\b({{t13s3}}\.(?:{{t3s13}})(?:[eE][-+]?{{t13s3}})?)\b(?![.\d])'
      scope: constant.numeric.floating-point.zxx

    - match: '\b({{t13s3}}\.(?:{{t3s13}})(?:[eE][-+]?{{t13s3}})?)[.\d]+'
      scope: invalid.illegal.floating-point.zxx

    - match: '\b(\d+\.\d+(?:[eE][-+]?\d+)?)\b(?![.\d])'
      scope: constant.numeric.floating-point.zxx

    - match: '\b(\d+\.\d+(?:[eE][-+]?\d+)?)[.\d]+'
      scope: invalid.illegal.floating-point.zxx

    - match: '\b({{t13s3}}([eE][-+]?{{t13s3}})?|\d+)\b'
      scope: constant.numeric.integer.zxx

    - match: '\b({{t13s3}}([eE][-+]?{{t13s3}})?|\d+)\b'
      scope: constant.numeric.integer.zxx

    - match: \"
      scope: punctuation.definition.bytes-string.begin.zxx
      push:
        - meta_scope: string.bytes-string.zxx
        - match: \"
          scope: punctuation.definition.bytes-string.end.zxx
          pop: true

    - include: string

    - match: \`
      scope: punctuation.definition.template-string.begin.zxx
      push:
        - meta_scope: string.template-string.zxx
        - match: \`
          scope: punctuation.definition.template-string.end.zxx
          pop: true
        - match: \$\{
          push:
            - include: expression
            - match: \}
              pop: true

  string:
    - match: \'
      scope: punctuation.definition.string.begin.zxx
      push:
        - meta_scope: string.quoted.single.zxx
        - match: \'
          scope: punctuation.definition.string.end.zxx
          pop: true

  assignment:
    - match: "(?://|<<|>>|[-+*/%&^|])?="
      scope: keyword.operator.assignment.zxx

  operator:
    - match: '([+][+]|--|:|[\]\)\}] +[\[\(\{])'
      scope: invalid.illegal.operator.zxx

    - match: \(
      scope: punctuation.definition.group.begin.zxx
      push:
        - include: expression
        - match: \)
          scope: punctuation.definition.group.end.zxx
          pop: true

    - match: \b(in|not in)\b
      scope: keyword.operator.membership.zxx
    - match: \b(is not|is)\b
      scope: keyword.operator.comparison.zxx
    - match: \b(un|not|and|or)\b
      scope: keyword.operator.logical.zxx
    - match: (==|<>|<|<=|>|>=|≠|≤|≥|≈)
      scope: keyword.operator.comparison.zxx
    - match: "(//|<<|>>>|>>|[*][*]|[-+*/%&^|~])"
      scope: keyword.operator.arithmetic.zxx
    - match: ([.]{2,3})
      scope: keyword.operator.range.zxx
    - match: \.
      scope: keyword.operator.dot.zxx
    - match: \,
      scope: punctuation.separator.zxx

  complex-types:
    - match: \[
      scope: punctuation.definition.list.begin.zxx
      push:
        - include: expression
        - match: \]
          scope: punctuation.definition.list.end.zxx
          pop: true
    - match: \{
      scope: punctuation.definition.map.begin.zxx
      push:
        - include: expression
        - match: \}
          scope: punctuation.definition.map.end.zxx
          pop: true

    - match: \b(fun)\b
      captures:
        1: storage.type.zxx
      push:
        - match: (\()(\))
          pop: true
          captures:
            1: punctuation.definition.group.begin.zxx
            2: punctuation.definition.group.end.zxx
        - match: \(
          name: punctuation.definition.group.begin.zxx
          set:
            - include: parameter

  builtin:
    - match: \b(any|b(ool|yte)|string|rune|float(32)?|u?int(8|16|32|64)?|datetime)\b
      scope: support.type.zxx
    - match: \b(true|iota|false|null|iota|NaN|Infinity)\b
      scope: constant.language.zxx
    - match: \b(self|super)\b
      scope: variable.language.zxx variable.parameter.zxx
    - match: _
      scope: entity.name.constant.zxx