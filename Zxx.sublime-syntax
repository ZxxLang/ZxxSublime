%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
# http://www.sublimetext.com/docs/3/scope_naming.html
name: zxx
file_extensions:
  - zxx
  - zxx.md
first_line_match: ^#!\s*/.*\bzxx(\d(\.\d)?)?\b
scope: source.zxx
variables:
  keywords: '(?:[ \t])(echo|error|void|fun|pub|let|def|iota|and|or|not|in|is|self|super|defer|if|of|for|else|break|continue|throw|catch|out|yield)(?:[ \n])'
  identifier: '\p{L}(?:-?[\d\p{L}])*'
  path: '(?:[.]/)?[A-Za-z]+(?:[._/-]*[A-Za-z0-9])*'
  # thousands-separator
  t13s3: '\d{1,3}(?:-\d{3})+'
  t3s13: '\d{3}(?:-\d{1,2}|(?:-\d{3})+(?:-\d{1,2})?)'
  basic_types: \b(?:self|any|bool|byte|string|rune|float(?:32|64)?|u?int(?:8|16|32|64)?|datetime)\b(?![-]?[\d\p{L}])

contexts:
  main:
    - include: use
    - include: let
    - include: top-def
    - include: top-fun
    - match: ^.*
      scope: comment.line.zxx

  comment:
    - match: '^\t+([ ;].*)$'
      captures:
        1: comment.line.zxx
    - match: ' *((;).*)$'
      captures:
        1: comment..zxx
        2: punctuation.definition.comment.zxx
  pop:
    - match: ^(?=[^\t\n])
      pop: true

  use:
    - match: ^(use)\b *
      captures:
        1: storage.type.use.zxx
      push:
        - meta_scope: meta.use.zxx
        - include: comment
        - include: pop
        - match: (\')({{path}})(\')(?:[ ]+({{identifier}}))?
          captures:
            1: punctuation.definition.string.begin.zxx
            2: meta.path.zxx
            3: punctuation.definition.string.end.zxx
            4: entity.name.namespace.zxx

  let:
    - match: '^(?:(pub) )?(let)\b *'
      captures:
        1: storage.modifier.pub.zxx
        2: storage.type.let.zxx
      push:
        - meta_scope: meta.let.zxx
        - include: comment
        - include: pop
        - match: '{{keywords}}'
          scope: invalid.illegal.let-variable.zxx
          pop: true
        - match: _
          scope: keyword.other.variable.zxx
        - match: '({{identifier}})'
          scope: variable.other.constant.zxx
        - match: \,
          scope: punctuation.separator.zxx
        - match: =
          scope: keyword.operator.assignment.zxx
          push:
            - include: expression
            - match: $
              pop: true

  top-fun:
    - match: '^(?:(pub) )?(fun) (?:(@{{identifier}})(\.))?(?:({{identifier}})(\.))?(?:(\x27[^\x27]+\x27)|({{identifier}}))(\()'
      captures:
        1: storage.modifier.pub.zxx
        2: storage.type.fun.zxx
        3: storage.modifier.hack.zxx
        4: punctuation.accessor.zxx

        5: storage.type.zxx
        6: punctuation.accessor.zxx
        7: entity.other.operator-overloading.zxx
        8: entity.name.function.zxx
        9: punctuation.definition.parameter.begin.zxx

      push:
        - meta_scope: meta.function.zxx
        - match: \)
          scope: punctuation.definition.parameter.end.zxx
          pop: true
        - match: (?=[^ ])
          push:  parameter

    - match: ;.*
      scope: comment.line.zxx

    - match: ^(?=\t+)
      push: statements

  top-def:
    - match: '^(?:(pub) )?(def) (?:(@{{identifier}})(\.))?({{identifier}})'
      captures:
        1: storage.modifier.pub.zxx
        2: storage.type.def.zxx
        3: storage.modifier.hack.zxx
        4: punctuation.accessor.zxx
        5: entity.name.type.zxx
      push:
        - meta_scope: meta.def.zxx
        - include: def

  def:
    - match: '^(?=[^\t])'
      pop: true
    - match: ^(?=\t)
      set: field
    - match: ;.*
      scope: comment.line.zxx
    - match: (?:({{identifier}})(\.))?({{identifier}})
      captures:
        1: meta.namespace.zxx
        2: punctuation.accessor.zxx
        3: entity.other.inherited-type.zxx
      push:
        - match: (, *)(?:({{identifier}})(\.))?({{identifier}})
          captures:
            1: punctuation.separator.comma.zxx
            2: meta.namespace.zxx
            3: punctuation.accessor.zxx
            4: entity.other.inherited-type.zxx
        - include: complex-types
        - match: ;.*
          scope: comment.line.zxx
        - match: $
          pop: true
    - include: complex-types

  field:
    - match: ^(?=[^\t\n])
      pop: true
    - include: comment
    - match: '({{basic_types}}) +(_|{{identifier}}(-)?)'
      captures:
        1: support.type.zxx
        2: variable.other.member.zxx
        3: storage.modifier.minus.zxx

    - match: '({{identifier}}) +({{identifier}})(-)?'
      captures:
        1: storage.type.zxx
        2: variable.other.member.zxx
        3: storage.modifier.zxx
    - match: (?=\[|\{|fun\()
      push:
        - include: complex-types
        - match: ' +({{identifier}})(-)?'
          captures:
            1: variable.other.member.zxx
            2: storage.modifier.zxx
          pop: true

  parameter:
    - match: ^(?=[^\t\n])
      pop: true
    - match: \b(out|yield)\s+
      scope: keyword.control.zxx
    - match: ;.*$
      scope: comment.line.zxx
    - match: '(?=\))'
      pop: true
    - match: '(?=\[|\{|\bfun\()'
      push:
        - include: complex-types
        - match: ' *({{keywords}})'
          captures:
            1: invalid.illegal.parameter.zxx
        - match: ' *({{identifier}})'
          captures:
            1: variable.parameter.zxx
          pop: true

    - match: '(?:({{basic_types}})|(?:({{identifier}})(\.))?({{identifier}}))'
      captures:
        1: support.type.zxx
        2: storage.type.zxx
        3: punctuation.accessor.zxx
        4: storage.type.zxx
      push:
        - match: '({{keywords}})'
          scope: invalid.illegal.parameter.zxx
        - match: '({{identifier}})'
          scope: variable.parameter.zxx
        - match: '(?=,|\))'
          pop: true
        - match: ;.*
          scope: comment.line.zxx
          pop: true
        - match: $
          pop: true

    - match: $
      pop: true

  statements:
    - match: ^(?=[^\t\n])
      pop: true
    - include: comment
    - match: '^\t+(def) '
      captures:
        1: storage.type.def.zxx
      push: def

    - match: '^\t+(fun) ({{identifier}})\('
      captures:
        1: storage.type.fun.zxx
        2: entity.name.function.zxx
        3: punctuation.definition.parameter.begin.zxx
      push:
        - match: \)
          scope: punctuation.definition.parameter.end.zxx
          pop: true
        - match: (?=[^ ])
          push:  parameter

    - match: ^(\t+)
      push:
        - include: pop
        - match: \b(out|echo|defer|if|of|for|else|break|continue|throw|catch|yield)\b
          scope: keyword.control.zxx
        - match: \,
          scope: punctuation.separator.zxx

        - include: expression
        - include: assignment
        - include: comment

  expression:
    - match: ^(?=[^\t\n])
      pop: true
    - include: sub-type
    - include: comment

    - match: \b(copy|error|void)\b
      scope: support.function.builtin.zxx

    - match: '(\[|\()(?=[^:]+:)'
      captures:
        1: punctuation.definition.slice.begin.zxx
      push:
        - include: expression
        - match: ':'
          scope: punctuation.definition.colon.zxx
        - include: expression
        - match: '(]|\))'
          scope: punctuation.definition.slice.end.zxx
          pop: true
        - match: '.*'
          scope: invalid.illegal.expression.zxx
          pop: true

    - include: builtin
    - include: literals
    - include: complex-types
    - include: operator
    - match: '{{identifier}}'
      scope: variable.other.zxx

  literals:
    - match: ^(?=[^\t\n])
      pop: true
    - match: '\b(\d{4}(-?(0[1-9]|1[0-2])(-?(0[1-9]|[12][0-9]|3[01]))?)?T(\d\d(:?\d\d){0,2}(\.\d{1,9})?)?(Z|[-+]\d\d(:?\d\d)?)?)\b'
      scope: constant.other.datetime.zxx

    - match: '\b0f([0-9a-fA-F]{16}|[0-9a-fA-F]{8})\b'
      scope: constant.numeric.floating-point.zxx

    - match: '\b(0x[0-9a-fA-F]+|0b[01]+)\b'
      scope: constant.numeric.integer.zxx

    - match: '\b({{t13s3}}\.(?:{{t3s13}})(?:[eE][-+]?{{t13s3}})?)\b(?![.\d])'
      scope: constant.numeric.floating-point.zxx

    - match: '\b({{t13s3}}\.(?:{{t3s13}})(?:[eE][-+]?{{t13s3}})?)[.\d]+'
      scope: invalid.illegal.floating-point.zxx

    - match: '\b(\d+\.\d+(?:[eE][-+]?\d+)?)\b(?![.\d])'
      scope: constant.numeric.floating-point.zxx

    - match: '\b(\d+\.\d+(?:[eE][-+]?\d+)?)[.\d]+'
      scope: invalid.illegal.floating-point.zxx

    - match: '\b({{t13s3}}([eE][-+]?{{t13s3}})?|\d+)\b'
      scope: constant.numeric.integer.zxx

    - match: '\b({{t13s3}}([eE][-+]?{{t13s3}})?|\d+)\b'
      scope: constant.numeric.integer.zxx

    - match: \"
      scope: punctuation.definition.bytes-string.begin.zxx
      push:
        - meta_scope: string.bytes-string.zxx
        - include: escaped_char
        - match: \"
          scope: punctuation.definition.bytes-string.end.zxx
          pop: true

    - match: \'
      scope: punctuation.definition.string.begin.zxx
      push:
        - meta_scope: string.quoted.single.zxx
        - include: escaped_char
        - match: \'
          scope: punctuation.definition.string.end.zxx
          pop: true

    - match: \`
      scope: punctuation.definition.template-string.begin.zxx
      push:
        - meta_scope: string.template-string.zxx
        - match: ^([^\t]+)
          scope: invalid.illegal.loss-indentation.zxx
          pop: true
        - match: \`
          scope: punctuation.definition.template-string.end.zxx
          pop: true
        - match: \$\{
          scope: punctuation.definition.template-expression.begin.zxx
          push:
            - meta_scope: meta.template-expression.zxx
            - include: expression
            - match: \}
              scope: punctuation.definition.template-expression.end.zxx
              pop: true
  escaped_char:
    - match: ^([^\t]+)
      scope: invalid.illegal.indentation.zxx
      pop: true
    - match: (\\x[0-9A-Fa-f]{2})|(\\[0-7]{3})|(\\\\)|(\\")|(\\')|(\\a)|(\\b)|(\\f)|(\\n)|(\\r)|(\\t)|(\\v)
      captures:
        1: constant.character.escape.hex.zxx
        2: constant.character.escape.octal.zxx
        3: constant.character.escape.newline.zxx
        4: constant.character.escape.backlash.zxx
        5: constant.character.escape.double-quote.zxx
        6: constant.character.escape.single-quote.zxx
        7: constant.character.escape.bell.zxx
        8: constant.character.escape.backspace.zxx
        9: constant.character.escape.formfeed.zxx
        10: constant.character.escape.linefeed.zxx
        11: constant.character.escape.return.zxx
        12: constant.character.escape.tab.zxx
        13: constant.character.escape.vertical-tab.zxx
    - match: (\\U[0-9A-Fa-f]{8})|(\\u[0-9A-Fa-f]{4})|(\\N\\{[a-zA-Z ]+\\})
      captures:
        1: constant.character.escape.unicode.16-bit-hex.zxx
        2: constant.character.escape.unicode.32-bit-hex.zxx
        3: constant.character.escape.unicode.name.zxx
    - match: (\\[.]|\\$)
      captures:
        1: constant.character.escape.zxx

  assignment:
    - include: sub-type
    - match: ^(?=[^\t\n])
      pop: true
    - match: "(?://|<<|>>|[-+*/%&^|])?="
      scope: keyword.operator.assignment.zxx

  operator:
    - match: ^(?=[^\t\n])
      pop: true
    - include: comment
    - match: '([+][+]|--|[\]\)\}] +[\[\(\{])'
      scope: invalid.illegal.operator.zxx

    - match: \b(in|not in)\b
      scope: keyword.operator.membership.zxx
    - match: \b(is not|is)\b
      scope: keyword.operator.comparison.zxx
    - match: \b(not|and|or)\b
      scope: keyword.operator.logical.zxx
    - match: (==|<>|<|<=|>|>=|≠|≤|≥|≈)
      scope: keyword.operator.comparison.zxx
    - match: "(//|<<|>>>|>>|[*][*]|[-+*/%&^|~])"
      scope: keyword.operator.arithmetic.zxx
    - match: ([.]{2,3})
      scope: keyword.operator.range.zxx
    - match: \.
      scope: keyword.operator.dot.zxx
      push:
        - match: '{{identifier}}'
          scope: variable.other.member.zxx
          pop: true
        - match: ';.*'
          scope: comment.line.zxx
          pop: true
        - match: $
          pop: true

    - match: \,
      scope: punctuation.separator.zxx

  complex-types:
    - match: ^(?=[^\t\n])
      pop: true
    - match: \[
      scope: punctuation.definition.brackets.begin.zxx
      push:
        - include: expression
        - match: '\+'
          scope: storage.modifier.growth.zxx
        - match: \]
          scope: punctuation.definition.brackets.end.zxx
          pop: true
    - match: \{
      scope: punctuation.definition.brackets.begin.zxx
      push:
        - include: expression
        - match: '\+'
          scope: storage.modifier.growth.zxx
        - match: \}
          scope: punctuation.definition.brackets.end.zxx
          pop: true

    - match: \b(fun)(\()
      captures:
        1: storage.type.zxx
        2: punctuation.definition.group.begin.zxx
      push:
        - match: \)
          scope: punctuation.definition.parameter.end.zxx
          pop: true
        - match: '[^)]+$'
          scope: invalid.illegal.parameter.zxx
          pop: true
        - match: (?=[^ ])
          push:  parameter

  builtin:
    - match: ^(?=[^\t\n])
      pop: true
    - match: \b(any|b(ool|yte)|string|rune|float(32)?|u?int(8|16|32|64)?|datetime)\b
      scope: support.type.zxx
    - match: \b(true|iota|false|null|iota|NaN|Infinity)\b
      scope: constant.language.zxx
    - match: \b(self|super)\b
      scope: variable.language.zxx
    - match: _
      scope: keyword.other.variable.zxx

